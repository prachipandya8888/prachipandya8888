{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f8e8b36a",
   "metadata": {},
   "source": [
    "# 1.1 write a pyton programe(with concepts) to find the area of triangle using the below formula.\n",
    "area = (s*(s-a)*(s-b)*(s-c))** 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "23e39155",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-1-0bb825c87a41>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-1-0bb825c87a41>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    if a, b, c are the three sides of a triangle then,\u001b[0m\n\u001b[1;37m        ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "if a, b, c are the three sides of a triangle then,\n",
    "s = (a+b+c)/2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75f59027",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Python Program to find the area of triangle\n",
    "\n",
    "a = 5\n",
    "b = 6\n",
    "c = 7\n",
    "\n",
    "# Uncomment below to take inputs from the user\n",
    "# a = float(input('Enter first side: '))\n",
    "# b = float(input('Enter second side: '))\n",
    "# c = float(input('Enter third side: '))\n",
    "\n",
    "# calculate the semi-perimeter\n",
    "s = (a + b + c) / 2\n",
    "\n",
    "# calculate the area\n",
    "area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n",
    "print('The area of the triangle is %0.2f' %area)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "68615d86",
   "metadata": {},
   "outputs": [],
   "source": [
    "# python program to find the area of triangle\n",
    "\n",
    "a = 3\n",
    "b = 4\n",
    "c = 5\n",
    "\n",
    "#uncomment below to take inputs from the user\n",
    "#a = float(input('Enter first side: '))\n",
    "#b = float(input('Enter second side:'))\n",
    "#c = float(input('Enter third side:'))\n",
    "\n",
    "#calculate the semi-perimeter\n",
    "s = (a+b+c)/2\n",
    "\n",
    "#calculate the area\n",
    "area = (s*(s-a)*(s-b)*(s-c))**0.5\n",
    "print('The area of the triangle is %0.2f' %area)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f958763d",
   "metadata": {},
   "source": [
    "# 1.2 write a function filter_long_words() that takes a list of words and an integer n and returns the list of words that are longer than n.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c4bb3fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to find the longest\n",
    "# length in the list\n",
    "def longestLength(a):\n",
    "\tmax1 = len(a[0])\n",
    "\ttemp = a[0]\n",
    "\n",
    "\t# for loop to traverse the list\n",
    "\tfor i in a:\n",
    "\t\tif(len(i) > max1):\n",
    "\n",
    "\t\t\tmax1 = len(i)\n",
    "\t\t\ttemp = i\n",
    "\n",
    "\tprint(\"The word with the longest length is:\", temp,\n",
    "\t\t\" and length is \", max1)\n",
    "\n",
    "\n",
    "# Driver Program\n",
    "a = [\"one\", \"two\", \"seventh\", \"four\"]\n",
    "longestLength(a)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52794b4e",
   "metadata": {},
   "source": [
    "# 2.1 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9769b4a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to find the longest length in the list\n",
    "def longestLength(words):\n",
    "\tfinalList = []\n",
    "\t\n",
    "\tfor word in words:\n",
    "\t\tfinalList.append((len(word), word))\n",
    "\t\n",
    "\tfinalList.sort()\n",
    "\t\n",
    "\tprint(\"The word with the longest length is:\", finalList[-1][1],\n",
    "\t\t\" and length is \", len(finalList[-1][1]))\n",
    "\n",
    "\n",
    "# Driver Program\n",
    "a = [\"sweta\", \"two\", \"prachu\", \"relevence\",\"eight\"]\n",
    "longestLength(a)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a23e3a8",
   "metadata": {},
   "source": [
    "# 2.2 write a python function which takes a character(i.e string of a length 1) and returns true if it is a vowel,false otherwise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a08d62ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "given code :\n",
    "def isVowel(char):\n",
    "    '''\n",
    "    char: a single letter of any case\n",
    "\n",
    "    returns: True if char is a vowel and False otherwise.\n",
    "    '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40bed649",
   "metadata": {},
   "outputs": [],
   "source": [
    "my code:\n",
    "def isVowel(char):\n",
    "    '''\n",
    "    char: a single letter of any case\n",
    "\n",
    "    returns: True if char is a vowel and False otherwise.\n",
    "    '''\n",
    "    if char == 'a' or 'e' or 'i' or 'o' or 'u' or 'A' or 'E' or 'I' or 'O' or 'U':\n",
    "        return True\n",
    "    else:\n",
    "        return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e61146ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the Character: \n"
     ]
    }
   ],
   "source": [
    "print(\"Enter the Character: \")\n",
    "c = input()\n",
    "\n",
    "if c=='a' or c=='e' or c=='i' or c=='o' or c=='u':\n",
    "    print(\"\\nIt is a Vowel\")\n",
    "elif c=='A' or c=='E' or c=='I' or c=='O' or c=='U':\n",
    "    print(\"\\nIt is a Vowel\")\n",
    "else:\n",
    "    print(\"\\nIt is a Consonant\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
